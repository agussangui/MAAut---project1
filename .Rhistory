title = "Scatter Plot Classes",
override.aes = list(alpha = 1),  # Show full opacity in legend
order = 1  # Primary legend
),
fill = ggplot2::guide_legend(
title = "Density Plot Classes",
override.aes = list(alpha = 1),
order = 2  # Secondary legend
)
) +
ggplot2::theme(
axis.text = ggplot2::element_text(size = 4),
strip.text = ggplot2::element_text(size = 5),
legend.position = "bottom",
legend.box = "horizontal",  # Place legends side by side
legend.spacing = ggplot2::unit(1, "cm")  # Space between legends
)
p
},
width = 45,  # Increased width to accommodate two legends
height = 40,
dpi = 200,
limitsize = FALSE
)
# Clean up
rm(plot_data)
gc()
plot_data <- cbind(
train_data[, sapply(train_data, is.numeric)],
Class = train_data$Class
)
# Create consistent color mapping
class_colors <- ggplot2::scale_color_brewer(palette = "Set1")$palette(length(levels(plot_data$Class)))
# Create and save plot with consistent colors
ggplot2::ggsave(
"FULL_pairs_plot_CONSISTENT_COLORS.png",
plot = {
base_plot <- GGally::ggpairs(
data = plot_data,
columns = 1:19,
mapping = ggplot2::aes(color = Class),
title = "Complete Pairs Plot (Colored by Class)",
upper = list(
continuous = GGally::wrap("cor",
size = 2,
color = "black")
),
lower = list(
continuous = GGally::wrap(
function(data, mapping, ...) {
ggplot2::ggplot(data, mapping) +
ggplot2::geom_point(
alpha = 0.3,
size = 0.8
) +
ggplot2::scale_color_manual(
values = class_colors,
guide = "none"  # Hide individual legends
)
}
)
),
diag = list(
continuous = GGally::wrap(
function(data, mapping, ...) {
ggplot2::ggplot(data, mapping) +
ggplot2::geom_density(
alpha = 0.4
) +
ggplot2::scale_color_manual(
values = class_colors,
guide = "none"
)
}
)
),
progress = FALSE
)
# Add unified legend
base_plot +
ggplot2::scale_color_manual(
name = "Class Colors",
values = class_colors,
guide = ggplot2::guide_legend(
override.aes = list(
alpha = 1,  # Full opacity in legend
size = 3    # Larger points in legend
)
)
) +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.text = ggplot2::element_text(size = 4),
strip.text = ggplot2::element_text(size = 5),
legend.position = "bottom"
)
},
width = 40,
height = 38,
dpi = 200,
limitsize = FALSE
)
# Generate PAIR PLOTS with consistent colors
plot_data <- cbind(
train_data[, sapply(train_data, is.numeric)],
Class = train_data$Class
)
# Get the color palette we want to use
class_levels <- levels(plot_data$Class)
color_palette <- RColorBrewer::brewer.pal(length(class_levels), "Set1")
names(color_palette) <- class_levels
# Create and save the plot
ggplot2::ggsave(
"FULL_pairs_plot_CONSISTENT.png",
plot = {
# Create base plot with modified elements
p <- GGally::ggpairs(
data = plot_data,
columns = 1:19,
mapping = ggplot2::aes(color = Class),
title = "Complete Pairs Plot (Colored by Class)",
upper = list(
continuous = GGally::wrap("cor",
size = 2,
color = "black")
),
lower = list(
continuous = GGally::wrap(
function(data, mapping, ...) {
ggplot2::ggplot(data, mapping) +
ggplot2::geom_point(alpha = 0.3, size = 0.8) +
ggplot2::scale_color_manual(values = color_palette)
}
)
),
diag = list(
continuous = GGally::wrap(
function(data, mapping, ...) {
ggplot2::ggplot(data, mapping) +
ggplot2::geom_density(alpha = 0.4) +
ggplot2::scale_color_manual(values = color_palette)
}
)
),
progress = FALSE
)
# Add the unified legend
p + ggplot2::scale_color_manual(
name = "Class Colors",
values = color_palette,
guide = ggplot2::guide_legend(
override.aes = list(alpha = 1, size = 3)
)
) +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.text = ggplot2::element_text(size = 4),
strip.text = ggplot2::element_text(size = 5),
legend.position = "bottom"
)
},
width = 40,
height = 38,
dpi = 200,
limitsize = FALSE
)
# Generate PAIR PLOTS with consistent colors
plot_data <- cbind(
train_data[, sapply(train_data, is.numeric)],
Class = train_data$Class
)
# Get the color palette we want to use
class_levels <- levels(plot_data$Class)
color_palette <- RColorBrewer::brewer.pal(length(class_levels), "Set1")
names(color_palette) <- class_levels
# Create and save the plot
ggplot2::ggsave(
"FULL_pairs_plot_CONSISTENT.png",
plot = {
# Create base plot with modified elements
p <- GGally::ggpairs(
data = plot_data,
columns = 1:19,
mapping = ggplot2::aes(color = Class),
title = "Complete Pairs Plot (Colored by Class)",
upper = list(
continuous = GGally::wrap("cor",
size = 2,
color = "black")
),
lower = list(
continuous = GGally::wrap(
function(data, mapping, ...) {
ggplot2::ggplot(data, mapping) +
ggplot2::geom_point(alpha = 0.3, size = 0.8) +
ggplot2::scale_color_manual(values = color_palette)
}
)
),
diag = list(
continuous = GGally::wrap(
function(data, mapping, ...) {
ggplot2::ggplot(data, mapping) +
ggplot2::geom_density(alpha = 0.4) +
ggplot2::scale_color_manual(values = color_palette)
}
)
),
progress = FALSE
)
# Add the unified legend
p + ggplot2::scale_color_manual(
name = "Class Colors",
values = color_palette,
guide = ggplot2::guide_legend(
override.aes = list(alpha = 1, size = 3)
)
) +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.text = ggplot2::element_text(size = 4),
strip.text = ggplot2::element_text(size = 5),
legend.position = "bottom"
)
},
width = 40,
height = 38,
dpi = 200,
limitsize = FALSE
)
# Generate PAIR PLOTS with consistent colors (Alternative Approach)
plot_data <- cbind(
train_data[, sapply(train_data, is.numeric)],
Class = train_data$Class
)
# Get color palette
class_levels <- levels(plot_data$Class)
color_palette <- RColorBrewer::brewer.pal(length(class_levels), "Set1")
names(color_palette) <- class_levels
# Create plot matrix manually
create_plot_matrix <- function(data, cols) {
plot_list <- list()
for(i in seq_along(cols)) {
for(j in seq_along(cols)) {
if(i == j) {
# Diagonal: Density plots
plot_list[[paste(i,j)]] <- ggplot2::ggplot(data, ggplot2::aes(x = .data[[cols[i]]], color = Class)) +
ggplot2::geom_density(alpha = 0.4) +
ggplot2::scale_color_manual(values = color_palette) +
ggplot2::theme_minimal()
} else if(i < j) {
# Upper triangle: Correlation values
plot_list[[paste(i,j)]] <- GGally::ggally_cor(
data = data,
mapping = ggplot2::aes(x = .data[[cols[i]]], y = .data[[cols[j]]]),
size = 2,
color = "black"
)
} else {
# Lower triangle: Scatter plots
plot_list[[paste(i,j)]] <- ggplot2::ggplot(data, ggplot2::aes(x = .data[[cols[i]]], y = .data[[cols[j]]], color = Class)) +
ggplot2::geom_point(alpha = 0.3, size = 0.8) +
ggplot2::scale_color_manual(values = color_palette) +
ggplot2::theme_minimal()
}
}
}
# Combine plots using patchwork
combined <- patchwork::wrap_plots(plot_list, ncol = length(cols), guides = "collect") +
patchwork::plot_annotation(title = "Complete Pairs Plot (Colored by Class)") &
ggplot2::theme(
legend.position = "bottom",
axis.text = ggplot2::element_text(size = 4),
strip.text = ggplot2::element_text(size = 5)
)
return(combined)
}
# Save the plot
ggplot2::ggsave(
"FULL_pairs_plot_MANUAL.png",
plot = create_plot_matrix(plot_data, colnames(plot_data)[1:19]),
width = 40,
height = 38,
dpi = 200,
limitsize = FALSE
)
# Clean up
rm(plot_data, color_palette, class_levels)
gc()
# Generate PAIR PLOTS with consistent colors (Alternative Approach)
plot_data <- cbind(
train_data[, sapply(train_data, is.numeric)],
Class = train_data$Class
)
# Get color palette
class_levels <- levels(plot_data$Class)
color_palette <- RColorBrewer::brewer.pal(length(class_levels), "Set1")
names(color_palette) <- class_levels
# Create plot matrix manually
create_plot_matrix <- function(data, cols) {
plot_list <- list()
for(i in seq_along(cols)) {
for(j in seq_along(cols)) {
if(i == j) {
# Diagonal: Density plots
plot_list[[paste(i,j)]] <- ggplot2::ggplot(data, ggplot2::aes(x = .data[[cols[i]]], color = Class)) +
ggplot2::geom_density(alpha = 0.4) +
ggplot2::scale_color_manual(values = color_palette) +
ggplot2::theme_minimal()
} else if(i < j) {
# Upper triangle: Class-specific correlations
plot_list[[paste(i,j)]] <- ggplot2::ggplot(data) +
ggplot2::annotate(
"text",
x = 0.5,
y = 0.5,
label = paste(
sapply(levels(data$Class), function(cls) {
sub_data <- data[data$Class == cls, ]
cor_val <- round(cor(sub_data[[cols[i]]], sub_data[[cols[j]]]), 2)
paste0(cls, ": ", cor_val)
}),
collapse = "\n"
),
size = 2.5,
color = color_palette[levels(data$Class)]  # Match class colors
) +
ggplot2::theme_void()
} else {
# Lower triangle: Scatter plots
plot_list[[paste(i,j)]] <- ggplot2::ggplot(data, ggplot2::aes(x = .data[[cols[i]]], y = .data[[cols[j]]], color = Class)) +
ggplot2::geom_point(alpha = 0.3, size = 0.8) +
ggplot2::scale_color_manual(values = color_palette) +
ggplot2::theme_minimal()
}
}
}
# Combine plots
combined <- patchwork::wrap_plots(plot_list, ncol = length(cols), guides = "collect") +
patchwork::plot_annotation(title = "Complete Pairs Plot (Colored by Class)") &
ggplot2::theme(
legend.position = "bottom",
axis.text = ggplot2::element_text(size = 4),
strip.text = ggplot2::element_text(size = 5)
)
return(combined)
}
# Save the plot
ggplot2::ggsave(
"PAIRS_PLOT.png",
plot = create_plot_matrix(plot_data, colnames(plot_data)[1:19]),
width = 40,
height = 38,
dpi = 200,
limitsize = FALSE
)
# Clean up
rm(plot_data, color_palette, class_levels)
gc()
# Generate PAIR PLOTS with consistent colors (Alternative Approach)
plot_data <- cbind(
train_data[, sapply(train_data, is.numeric)],
Class = train_data$Class
)
# Get color palette
class_levels <- levels(plot_data$Class)
color_palette <- RColorBrewer::brewer.pal(length(class_levels), "Set1")
names(color_palette) <- class_levels
create_plot_matrix <- function(data, cols) {
plot_list <- list()
for(i in seq_along(cols)) {
for(j in seq_along(cols)) {
if(i == j) {
# Diagonal: Density plots
plot_list[[paste(i,j)]] <- ggplot2::ggplot(data, ggplot2::aes(x = .data[[cols[i]]], color = Class)) +
ggplot2::geom_density(alpha = 0.4) +
ggplot2::scale_color_manual(values = color_palette) +
ggplot2::theme_minimal()
} else if(i < j) {
# Upper triangle: Combined correlations
plot_list[[paste(i,j)]] <- ggplot2::ggplot(data) +
ggplot2::annotate(
"text",
x = 0.5,
y = 0.7,
label = paste("Overall:", round(cor(data[[cols[i]]], data[[cols[j]]]), 2)),
size = 3,
color = "black",
fontface = "bold"
) +
ggplot2::annotate(
"text",
x = 0.5,
y = 0.3,
label = paste(
sapply(levels(data$Class), function(cls) {
sub_data <- data[data$Class == cls, ]
cor_val <- round(cor(sub_data[[cols[i]]], sub_data[[cols[j]]]), 2)
paste0(cls, ": ", cor_val)
}),
collapse = "\n"
),
size = 2.5,
color = color_palette[levels(data$Class)]  # Class colors
) +
ggplot2::theme_void()
} else {
# Lower triangle: Scatter plots
plot_list[[paste(i,j)]] <- ggplot2::ggplot(data, ggplot2::aes(x = .data[[cols[i]]], y = .data[[cols[j]]], color = Class)) +
ggplot2::geom_point(alpha = 0.3, size = 0.8) +
ggplot2::scale_color_manual(values = color_palette) +
ggplot2::theme_minimal()
}
}
}
# Combine plots
combined <- patchwork::wrap_plots(plot_list, ncol = length(cols), guides = "collect") +
patchwork::plot_annotation(title = "Complete Pairs Plot (Colored by Class)") &
ggplot2::theme(
legend.position = "bottom",
axis.text = ggplot2::element_text(size = 4),
strip.text = ggplot2::element_text(size = 5)
)
return(combined)
}
# Save the plot
ggplot2::ggsave(
"PAIRS_PLOT.png",
plot = create_plot_matrix(plot_data, colnames(plot_data)[1:19]),
width = 40,
height = 38,
dpi = 200,
limitsize = FALSE
)
# Clean up
rm(plot_data, color_palette, class_levels)
gc()
# Generate PAIR PLOTS with consistent colors (Alternative Approach)
plot_data <- cbind(
train_data[, sapply(train_data, is.numeric)],
Class = train_data$Class
)
# Get color palette
class_levels <- levels(plot_data$Class)
color_palette <- RColorBrewer::brewer.pal(length(class_levels), "Set1")
names(color_palette) <- class_levels
create_plot_matrix <- function(data, cols) {
plot_list <- list()
for(i in seq_along(cols)) {
for(j in seq_along(cols)) {
if(i == j) {
# Diagonal: Density plots
plot_list[[paste(i,j)]] <- ggplot2::ggplot(data, ggplot2::aes(x = .data[[cols[i]]], color = Class)) +
ggplot2::geom_density(alpha = 0.4) +
ggplot2::scale_color_manual(values = color_palette) +
ggplot2::theme_minimal()
} else if(i < j) {
# Upper triangle: Combined correlations
cor_text <- c(
paste("Overall:", round(cor(data[[cols[i]]], data[[cols[j]]]), 2)),
sapply(levels(data$Class), function(cls) {
paste0(cls, ": ", round(cor(data[data$Class == cls, cols[i]],
data[data$Class == cls, cols[j]]), 2))
})
)
plot_list[[paste(i,j)]] <- ggplot2::ggplot(data) +
ggplot2::annotate(
"text",
x = 0.5,
y = seq(0.9, 0.1, length.out = length(cor_text)),
label = cor_text,
size = c(3, rep(2.5, length(levels(data$Class)))),
color = c("black", color_palette[levels(data$Class)]),
fontface = c("bold", rep("plain", length(levels(data$Class))))
) +
ggplot2::theme_void() +
ggplot2::coord_cartesian(clip = "off")  # Allow text to extend beyond panel
} else {
# Lower triangle: Scatter plots
plot_list[[paste(i,j)]] <- ggplot2::ggplot(data, ggplot2::aes(x = .data[[cols[i]]], y = .data[[cols[j]]], color = Class)) +
ggplot2::geom_point(alpha = 0.3, size = 0.8) +
ggplot2::scale_color_manual(values = color_palette) +
ggplot2::theme_minimal()
}
}
}
# Combine plots with adjusted panel sizes
combined <- patchwork::wrap_plots(plot_list, ncol = length(cols), guides = "collect",
widths = rep(1, length(cols)),
heights = rep(1, length(cols))) +
patchwork::plot_annotation(title = "Complete Pairs Plot (Colored by Class)") &
ggplot2::theme(
legend.position = "bottom",
axis.text = ggplot2::element_text(size = 4),
strip.text = ggplot2::element_text(size = 5),
plot.margin = ggplot2::unit(c(0, 0, 0.5, 0), "cm")  # Add bottom margin
)
return(combined)
}
# Save the plot
ggplot2::ggsave(
"PAIRS_PLOT.png",
plot = create_plot_matrix(plot_data, colnames(plot_data)[1:19]),
width = 40,
height = 38,
dpi = 200,
limitsize = FALSE
)
# Clean up
rm(plot_data, color_palette, class_levels)
gc()
View(jmi_results)
